package html

import (
	"bytes"
	"fmt"
	"github.com/gocolly/colly"
	"github.com/immersivesky/s3-upload-emojis/convert"
	"github.com/immersivesky/s3-upload-emojis/image"
	"github.com/immersivesky/s3-upload-emojis/internal/adapters/repository"
	"github.com/immersivesky/s3-upload-emojis/location"
	"github.com/immersivesky/s3-upload-emojis/s3"
	"go.uber.org/zap"
	"strings"
)

type Emoji struct {
	Symbol   string
	Name     string
	PhotoURL string
}

func newEmoji(symbolEmoji, name, photoURL string) Emoji {
	return Emoji{
		Symbol:   symbolEmoji,
		Name:     name,
		PhotoURL: photoURL,
	}
}

func On(s3 *s3.S3, db *repository.DB, location location.Location, logger *zap.Logger) colly.HTMLCallback {
	return func(element *colly.HTMLElement) {
		var (
			spanImg = element.ChildAttr("span", "data-name")
			emoji   = newEmoji(
				element.ChildText("div.symbol-emoji"),
				getName(location.Name, spanImg),
				getPhotoURL(spanImg),
			)
			writer   bytes.Buffer
			path     = getPath(location.Name, location.Version, emoji.Name)
			img, err = image.GetImage(emoji.PhotoURL)
		)
		if err != nil {
			logger.Error("Error",
				zap.String("Message", err.Error()),
				zap.String("Name", emoji.Name),
				zap.String("S3 Path", path),
				zap.String("URL", emoji.PhotoURL),
			)
			return
		}

		convert.PNGToWEBP(img, &writer)
		s3.Upload(&writer, path)

		// —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ URL, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–Ω–∞—á–∞–ª–∞ —Ä–∞–∑—Ä–µ–∑–∞—Ç—å —Å—Ç—Ä–æ–∫—É
		// –ø—Ä–∏ –ø–æ–º–æ—â–∏ —Å–∏–º–≤–æ–ª–∞ -|/ –∏–ª–∏ -| –∏ –ø–æ–ª—É—á–∏—Ç—å —Å—Ä–µ–∑ 2 —ç–ª–µ–º–µ–Ω—Ç–æ–≤
		// 1 —ç–ª–µ–º–µ–Ω—Ç - –Ω–∞–∑–≤–∞–Ω–∏–µ S3 –±–∞–∫–µ—Ç–∞, 2 - –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
		// –Ω—É–∂–Ω–æ —ç—Ç–æ, —á—Ç–æ–±—ã –≤ —Å–ª—É—á–∞–µ –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ –¥—Ä—É–≥–æ–π –¥–æ–º–µ–Ω –Ω–µ –ø—Ä–∏—à–ª–æ—Å—å –∏–∑–º–µ–Ω—è—Ç—å –∑–∞–ø–∏—Å–∏
		// –º–Ω–µ –∫ –ø—Ä–∏–º–µ—Ä—É —É–¥–æ–±–Ω–æ –æ–±—Ö–æ–¥–∏—Ç—å CDN, –ø–æ—Å–∫–æ–ª—å–∫—É –æ–Ω –∫—ç—à–∏—Ä—É–µ—Ç –Ω–∞ 4 –¥–Ω—è
		// –∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –Ω–∞–æ–±–æ—Ä–æ—Ç, –Ω—É–∂–µ–Ω –±–ª–∏–∑–ª–µ–∂–∞—â–∏–π –∫ –Ω–∏–º –∫—ç—à
		// —Ç.–µ. –º—ã –æ–±—Ä–∞—â–∞–µ–º—Å—è –∫ —Ä–∞–∑–Ω—ã–º —Å–µ—Ä–≤–∏—Å–∞–º –Ω–∞ —Ä–∞–∑–Ω—ã—Ö –ø–æ–¥–¥–æ–º–µ–Ω–∞—Ö cdn.emojis –∏ emojis
		emojiID, err := db.CreateEmoji(location.EmojiPackID, "emojis-|/"+path)
		if err != nil {
			panic(err)
		}

		_, err = db.CreateEmojiShortCode(emojiID, emoji.Symbol)
		if err != nil {
			panic(err)
		}


		/*logger.Info("Success",
			zap.String("Name", emoji.Name),
			zap.String("URL", emoji.PhotoURL),
			zap.String("S3 Path", path),
			zap.String("EmojiID", fmt.Sprint(emojiID)),
			zap.String("ShortCodeID", fmt.Sprint(emojiShortCodeID)),
			zap.String("ShortCode", emoji.Symbol),
		)*/ // —ç—Ç–æ —è —É–±—Ä–∞–ª –ø–æ—Ç–æ–º—É, —á—Ç–æ –º–Ω–µ –≤–ø–∞–¥–ª—É —Ä–∞–∑–±–∏—Ä–∞—Ç—å—Å—è –≤ ELK
	}
}

// TODO: üí© (–Ω–µ–ø–æ–Ω—è—Ç–Ω–∞—è —Ö—É*–Ω—è)
func getName(vendorName, emojiPhotoURL string) (newPhotoURL string) {
	var (
		onVendor     = fmt.Sprintf("-on-%s", vendorName)
		lowerOnVedor = strings.ToLower(onVendor)
	)

	newPhotoURL = strings.SplitAfterN(strings.ToLower(emojiPhotoURL), fmt.Sprintf("%s\\", strings.ToLower(vendorName)), -1)[1]
	newPhotoURL = strings.SplitAfterN(newPhotoURL, lowerOnVedor, -1)[0]
	newPhotoURL = strings.ReplaceAll(newPhotoURL, lowerOnVedor, "")

	return newPhotoURL
}

func getPhotoURL(spanImg string) string {
	return strings.ReplaceAll(strings.SplitAfterN(spanImg, ".png", -1)[0], "\\", "/")
}

func getPath(name, version, emojiName string) string {
	return fmt.Sprintf("%s/%s/webp/%s.webp", strings.ToLower(name), version, emojiName)
}
